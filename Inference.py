# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18MJJbvpheWBoaJuHqknk3h6ADRI6dLYe
"""

import torch
import torch.nn as nn
import torchvision
from torchvision import transforms
from PIL import Image
import argparse
import cv2
import numpy as np

my_parser = argparse.ArgumentParser()
my_parser.add_argument('--device',default='cpu', type=str)
my_parser.add_argument('--model_path', type=str)
my_parser.add_argument('--image_path', type=str)
args=my_parser.parse_args()

device = torch.device('cuda' if torch.cuda.is_available() and args.device=='GPU' else 'cpu')
model = torchvision.models.resnet50(pretrained=True)

# Transfer Learning
in_features = model.fc.in_features
model.fc = nn.Linear(in_features, 10)

model=model.to(device)

model.load_state_dict(torch.load(args.model_path,map_location=torch.device(args.device)))

transform =transforms.Compose([
                                transforms.Resize((64, 64)),
                                transforms.ToTensor(),
                                transforms.Normalize((0.485,0.456,0.406),(0.229,0.224,0.225))
])

model.eval()
img = cv2.imread('8.jpg')
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

PIL_image = Image.fromarray(img)

tensor = transform(PIL_image).unsqueeze(0).to(device)

# process
pred = model(tensor)

# postprocess
pred = pred.cpu().detach().numpy()
pred = np.argmax(pred)

print('prediction:', pred)